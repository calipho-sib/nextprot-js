/*! nextprot 2015-09-22 */
!function(a){"use strict";void 0===a.Nextprot&&(a.Nextprot={}),function(){function b(a){return new Promise(function(b,c){var d=new XMLHttpRequest;d.open("GET",a),d.onload=function(){200==d.status?b(d.response):c(Error(d.statusText))},d.onerror=function(){c(Error("Network Error"))},d.send()})}function c(a){return b(a).then(JSON.parse)}function d(a,b,c){var d=new RegExp("("+b+"=)[a-zA-Z0-9_]+","ig");return null!=a.match(d)?a.replace(d,"$1"+c):a+=(-1!=a.indexOf("?")?"&":"?")+b+"="+c}var e=function(a){a=a.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var b=new RegExp("[\\?&]"+a+"=([^&#]*)"),c=b.exec(location.search);return null===c?"":decodeURIComponent(c[1].replace(/\+/g," "))},f=e("env")||"pro",g="https://api.nextprot.org";"pro"!==f&&(g="http://"+f+"-api.nextprot.org");var h=g+"/sparql",i="?output=json",j=null,k=null,l=function(a,b){if(j=a,k=b,!a)throw"Please provide some application name  ex:  new Nextprot.Client('demo application for visualizing peptides', clientInformation);";if(!b)throw"Please provide some client information ex:  new Nextprot.Client(applicationName, 'Calipho SIB at Geneva');"},m=function(a){return"NX_"!==a.substring(0,3)&&(a="NX_"+a),a};l.prototype.setApiBaseUrl=function(a){g=a,h=g+"/sparql"},l.prototype.setSparqlEndpoint=function(a){h=a},l.prototype.getEnvironment=function(){return e("env")||"pro"},l.prototype.getEntryName=function(){return m(e("nxentry")||"NX_P01308")},l.prototype.getInputOption=function(){return e("inputOption")||""},l.prototype.changeEntry=function(a){var b=d(window.location.href,"nxentry",a.value);window.location.href=b};var n=function(a,b){return new Promise(function(c,d){var e=new XMLHttpRequest,f=g+"/entry/"+a+"/"+b+".json?clientInfo="+k+"&applicationName="+j;e.open("GET",f),e.onload=function(){200==e.status?c(JSON.parse(e.responseText)):d(Error(e.status))},e.onerror=function(){d(Error("Network Error"))},e.send()})},o=function(a,b){return new Promise(function(c,d){var e=new XMLHttpRequest,f=g+"/entries/search/peptide.json?peptide="+a+"&modeIL="+b;e.open("GET",f),e.onload=function(){200==e.status?c(JSON.parse(e.responseText)):d(Error(e.status))},e.onerror=function(){d(Error("Network Error"))},e.send()})},p=function(a){var b={},c={};return a.entry.publications.forEach(function(a){b[a.md5]=a}),a.entry.xrefs.forEach(function(a){c[a.dbXrefId]=a}),{annot:a.entry.annotations,publi:b,xrefs:c}};l.prototype.getEntryforPeptide=function(a){return o(a,"true").then(function(a){return a})};l.prototype.getSparqlPrefixes=function(a){return c(g+"/sparql-prefixes.json").then(function(a){var b="";return a.map(function(a){b+=a+"\n"}),b})},l.prototype.executeSparql=function(a){return this.getSparqlPrefixes().then(function(c){var d=c+a,e=h+i+"&query="+encodeURIComponent(d);return b(e)})},l.prototype.getAccession=function(a){return console.log("Use getEntryProperties instead"),n(m(a||this.getEntryName()),"accession").then(function(a){return a.entry.properties})},l.prototype.getEntryProperties=function(a){return n(m(a||this.getEntryName()),"accession").then(function(a){return a.entry.properties})},l.prototype.getProteinOverview=function(a){return n(m(a||this.getEntryName()),"overview").then(function(a){return a.entry.overview})},l.prototype.getProteinSequence=function(a){return n(m(a||this.getEntryName()),"isoform").then(function(a){return a.entry.isoforms})},l.prototype.getExons=function(a){return n(m(a||this.getEntryName()),"genomic-mapping").then(function(a){return a.entry.genomicMappings[0].isoformMappings})},l.prototype.getIsoformMapping=function(a){return n(m(a||this.getEntryName()),"isoform/mapping").then(function(a){return a})},l.prototype.getAnnotoationsByCategory=function(a,b){return n(m(a||this.getEntryName()),b).then(function(a){return p(a)})},l.prototype.getPeptide=function(a){return console.log("getPeptide is deprecated... use getAnnotoationsByCategory(entry, 'peptide-mapping') instead "),n(m(a||this.getEntryName()),"peptide-mapping").then(function(a){return a.entry.peptideMappings})},l.prototype.getSrmPeptide=function(a){return console.log("getSrmPeptide is deprecated. use getAnnotoationsByCategory(entry, 'srm-peptide-mapping') instead "),n(m(a||this.getEntryName()),"srm-peptide-mapping").then(function(a){return a.entry.srmPeptideMappings})},l.prototype.getAntibody=function(a){return n(m(a||this.getEntryName()),"antibody").then(function(a){return a.entry.antibodyMappings})},"undefined"!=typeof exports&&(exports.Client=l),a.Nextprot.Client=l}()}(this);
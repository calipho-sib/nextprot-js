/*! nextprot 2015-09-23 */
!function(a){"use strict";void 0===a.Nextprot&&(a.Nextprot={}),function(){function b(a,b,c){var d=new RegExp("("+b+"=)[a-zA-Z0-9_]+","ig");return null!==a.match(d)?a.replace(d,"$1"+c):a+=(-1!==a.indexOf("?")?"&":"?")+b+"="+c}function c(a){var c=a;return c=b(c,"clientInfo",l),c=b(c,"applicationName",k),Promise.resolve($.getJSON(c))}var d=function(a){a=a.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var b=new RegExp("[\\?&]"+a+"=([^&#]*)"),c=b.exec(location.search);return null===c?"":decodeURIComponent(c[1].replace(/\+/g," "))},e=function(a){var b={},c={};return a.entry.publications.forEach(function(a){b[a.md5]=a}),a.entry.xrefs.forEach(function(a){c[a.dbXrefId]=a}),{annot:a.entry.annotations,publi:b,xrefs:c}},f=function(a){return"NX_"!==a.substring(0,3)&&(a="NX_"+a),a},g=d("env")||"pro",h="https://api.nextprot.org";"pro"!==g&&(h="http://"+g+"-api.nextprot.org");var i=h+"/sparql",j="?output=json",k=null,l=null,m=function(a,b){var e=f(a||d("nxentry")||"NX_P01308"),g=h+"/entry/"+e;return b&&(g+="/"+b),c(g)},n=function(a,b){var d=h+"/entries/search/peptide?peptide="+a+"&modeIL="+b;return c(d)},o=function(a,b){if(k=a,l=b,!a)throw"Please provide some application name  ex:  new Nextprot.Client('demo application for visualizing peptides', clientInformation);";if(!b)throw"Please provide some client information ex:  new Nextprot.Client(applicationName, 'Calipho SIB at Geneva');"};o.prototype.setApiBaseUrl=function(a){h=a,i=h+"/sparql"},o.prototype.setSparqlEndpoint=function(a){i=a},o.prototype.getEnvironment=function(){return d("env")||"pro"},o.prototype.getEntryName=function(){return f(d("nxentry")||"NX_P01308")},o.prototype.getInputOption=function(){return d("inputOption")||""},o.prototype.changeEntry=function(a){var c=b(window.location.href,"nxentry",a.value);window.location.href=c},o.prototype.getEntryforPeptide=function(a){return n(a,"true").then(function(a){return a})};var p,q=function(a){var b="";return a.map(function(a){b+=a+"\n"}),b};o.prototype.getSparqlPrefixes=function(a){return p=p||c(h+"/sparql-prefixes").then(q)},o.prototype.executeSparql=function(a,b){return this.getSparqlPrefixes().then(function(d){var e=b?d+a:a,f=i+j+"&query="+encodeURIComponent(e);return c(f)})},o.prototype.getEntryProperties=function(a){return m(a,"accession").then(function(a){return a.entry.properties})},o.prototype.getProteinOverview=function(a){return m(a,"overview").then(function(a){return a.entry.overview})},o.prototype.getProteinSequence=function(a){return m(a,"isoform").then(function(a){return a.entry.isoforms})},o.prototype.getAnnotationsByCategory=function(a,b){return m(a,b).then(function(a){return e(a)})},o.prototype.getEntry=function(a,b){return m(a,b).then(function(a){return a.entry})},o.prototype.getIsoformMapping=function(a){return m(a,"isoform/mapping").then(function(a){return a})},o.prototype.getExons=function(a){return m(a,"genomic-mapping").then(function(a){return a.entry.genomicMappings[0].isoformMappings})},o.prototype.getAccession=function(a){return console.log("Use getEntryProperties instead"),m(a,"accession").then(function(a){return a.entry.properties})},o.prototype.getPeptide=function(a){return console.warn("getPeptide is deprecated. use getAnnototionsByCategory(entry, 'peptide-mapping') instead "),m(a,"peptide-mapping").then(function(a){return a.entry.peptideMappings})},o.prototype.getSrmPeptide=function(a){return console.warn("getSrmPeptide is deprecated. use getAnnototionsByCategory(entry, 'srm-peptide-mapping') instead "),m(a,"srm-peptide-mapping").then(function(a){return a.entry.srmPeptideMappings})},o.prototype.getAntibody=function(a){return m(a,"antibody").then(function(a){return a.entry.antibodyMappings})},"undefined"!=typeof exports&&(exports.Client=o),a.Nextprot.Client=o}()}(this);